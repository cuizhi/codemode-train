; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\OBJ\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\OBJ\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CORE -I..\HARDWARE -I..\USER -I..\SYSTEM -I..\STM32F10x_FWLib -I..\HARDWARE\KEY -I..\SYSTEM\sys -I..\HARDWARE\LED -I..\HARDWARE\usart -I..\STM32F10x_FWLib\inc -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x --omf_browse=..\OBJ\main.crf main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  set_led_gradation PROC
;;;30      */
;;;31     static void set_led_gradation(uint16_t hwLevel)
000000  4956              LDR      r1,|L1.348|
;;;32     {
;;;33         static uint16_t s_hwCounter = 0;
;;;34         
;;;35         if (hwLevel >= s_hwCounter) {
000002  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
000004  4288              CMP      r0,r1
000006  db04              BLT      |L1.18|
;;;36             LED1_ON();
000008  bf00              NOP      
00000a  2120              MOVS     r1,#0x20
00000c  4a54              LDR      r2,|L1.352|
00000e  6011              STR      r1,[r2,#0]
000010  e005              B        |L1.30|
                  |L1.18|
;;;37         } else {
;;;38             LED1_OFF();
000012  bf00              NOP      
000014  2120              MOVS     r1,#0x20
000016  4a52              LDR      r2,|L1.352|
000018  1f12              SUBS     r2,r2,#4
00001a  6011              STR      r1,[r2,#0]
00001c  bf00              NOP      
                  |L1.30|
;;;39         }
;;;40         
;;;41         s_hwCounter++;
00001e  494f              LDR      r1,|L1.348|
000020  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
000022  1c49              ADDS     r1,r1,#1
000024  4a4d              LDR      r2,|L1.348|
000026  8011              STRH     r1,[r2,#0]
;;;42         s_hwCounter &= TOP;
000028  4611              MOV      r1,r2
00002a  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
00002c  f3c10108          UBFX     r1,r1,#0,#9
000030  8011              STRH     r1,[r2,#0]
;;;43     }
000032  4770              BX       lr
;;;44     
                          ENDP

                  breath_led PROC
;;;45     static void breath_led(void)
000034  b510              PUSH     {r4,lr}
;;;46     {
;;;47         static uint16_t s_hwCounter = 0;
;;;48         static int16_t s_nGray = (TOP >> 1);
;;;49                         
;;;50         s_hwCounter++;
000036  484b              LDR      r0,|L1.356|
000038  8800              LDRH     r0,[r0,#0]  ; s_hwCounter
00003a  1c40              ADDS     r0,r0,#1
00003c  4949              LDR      r1,|L1.356|
00003e  8008              STRH     r0,[r1,#0]
;;;51         if (!(s_hwCounter & (_BV(10)-1))) {
000040  4608              MOV      r0,r1
000042  8800              LDRH     r0,[r0,#0]  ; s_hwCounter
000044  0580              LSLS     r0,r0,#22
000046  0d80              LSRS     r0,r0,#22
000048  d10f              BNE      |L1.106|
;;;52             s_nGray++; 
00004a  4847              LDR      r0,|L1.360|
00004c  8800              LDRH     r0,[r0,#0]  ; s_nGray
00004e  1c40              ADDS     r0,r0,#1
000050  b200              SXTH     r0,r0
000052  4945              LDR      r1,|L1.360|
000054  8008              STRH     r0,[r1,#0]
;;;53             if (s_nGray == TOP) {
000056  4608              MOV      r0,r1
000058  f9b00000          LDRSH    r0,[r0,#0]  ; s_nGray
00005c  f5a07180          SUB      r1,r0,#0x100
000060  39ff              SUBS     r1,r1,#0xff
000062  d102              BNE      |L1.106|
;;;54                 s_nGray = 0;
000064  2000              MOVS     r0,#0
000066  4940              LDR      r1,|L1.360|
000068  8008              STRH     r0,[r1,#0]
                  |L1.106|
;;;55             }
;;;56         }
;;;57         
;;;58         set_led_gradation(ABS(s_nGray - (TOP >> 1)));
00006a  493f              LDR      r1,|L1.360|
00006c  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
000070  39ff              SUBS     r1,r1,#0xff
000072  d505              BPL      |L1.128|
000074  493c              LDR      r1,|L1.360|
000076  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
00007a  f1c101ff          RSB      r1,r1,#0xff
00007e  e003              B        |L1.136|
                  |L1.128|
000080  4939              LDR      r1,|L1.360|
000082  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
000086  39ff              SUBS     r1,r1,#0xff
                  |L1.136|
000088  b288              UXTH     r0,r1
00008a  f7fffffe          BL       set_led_gradation
;;;59     }
00008e  bd10              POP      {r4,pc}
;;;60     /*-------------------test1a----------------------------*/
                          ENDP

                  test1 PROC
;;;61     static void test1(void)
000090  b510              PUSH     {r4,lr}
;;;62     {
;;;63         static uint32_t s_wTimeIdle = 0;
;;;64         static uint8_t s_chSendState = START;         
;;;65         
;;;66     
;;;67         switch(s_chSendState){
000092  4836              LDR      r0,|L1.364|
000094  7800              LDRB     r0,[r0,#0]  ; s_chSendState
000096  2809              CMP      r0,#9
000098  d255              BCS      |L1.326|
00009a  e8dff000          TBB      [pc,r0]
00009e  050c              DCB      0x05,0x0c
0000a0  2c1c2414          DCB      0x2c,0x1c,0x24,0x14
0000a4  343c4400          DCB      0x34,0x3c,0x44,0x00
;;;68             //----------Start
;;;69             case START:
;;;70                 s_wTimeIdle = 0;   //这个状态机中，计数等待部分的计数值初始化
0000a8  2000              MOVS     r0,#0
0000aa  4931              LDR      r1,|L1.368|
0000ac  6008              STR      r0,[r1,#0]  ; s_wTimeIdle
;;;71                 s_chSendState = SEND_H;
0000ae  2001              MOVS     r0,#1
0000b0  492e              LDR      r1,|L1.364|
0000b2  7008              STRB     r0,[r1,#0]
;;;72             //----------h
;;;73             case SEND_H:
0000b4  bf00              NOP      
;;;74                 if(serial_out('h')){
0000b6  2068              MOVS     r0,#0x68
0000b8  f7fffffe          BL       serial_out
0000bc  b110              CBZ      r0,|L1.196|
;;;75                     s_chSendState = SEND_E;
0000be  2005              MOVS     r0,#5
0000c0  492a              LDR      r1,|L1.364|
0000c2  7008              STRB     r0,[r1,#0]
                  |L1.196|
;;;76                 }
;;;77                 break;
0000c4  e040              B        |L1.328|
;;;78             //----------e
;;;79             case SEND_E:
;;;80                 if(serial_out('e')){
0000c6  2065              MOVS     r0,#0x65
0000c8  f7fffffe          BL       serial_out
0000cc  b110              CBZ      r0,|L1.212|
;;;81                     s_chSendState = SEND_L1;
0000ce  2003              MOVS     r0,#3
0000d0  4926              LDR      r1,|L1.364|
0000d2  7008              STRB     r0,[r1,#0]
                  |L1.212|
;;;82                 }
;;;83                 break;
0000d4  e038              B        |L1.328|
;;;84             //----------l
;;;85             case SEND_L1:
;;;86                 if(serial_out('l')){
0000d6  206c              MOVS     r0,#0x6c
0000d8  f7fffffe          BL       serial_out
0000dc  b110              CBZ      r0,|L1.228|
;;;87                     s_chSendState = SEND_L2;
0000de  2004              MOVS     r0,#4
0000e0  4922              LDR      r1,|L1.364|
0000e2  7008              STRB     r0,[r1,#0]
                  |L1.228|
;;;88                 }
;;;89                 break;
0000e4  e030              B        |L1.328|
;;;90             //----------l
;;;91             case SEND_L2:
;;;92                 if(serial_out('l')){
0000e6  206c              MOVS     r0,#0x6c
0000e8  f7fffffe          BL       serial_out
0000ec  b110              CBZ      r0,|L1.244|
;;;93                     s_chSendState = SEND_O;
0000ee  2002              MOVS     r0,#2
0000f0  491e              LDR      r1,|L1.364|
0000f2  7008              STRB     r0,[r1,#0]
                  |L1.244|
;;;94                 }
;;;95                 break;
0000f4  e028              B        |L1.328|
;;;96             //---------o
;;;97             case SEND_O:
;;;98                 if(serial_out('o')){
0000f6  206f              MOVS     r0,#0x6f
0000f8  f7fffffe          BL       serial_out
0000fc  b110              CBZ      r0,|L1.260|
;;;99                     s_chSendState = SEND_LR;
0000fe  2006              MOVS     r0,#6
000100  491a              LDR      r1,|L1.364|
000102  7008              STRB     r0,[r1,#0]
                  |L1.260|
;;;100                }
;;;101                break; 
000104  e020              B        |L1.328|
;;;102            //---------/r
;;;103            case SEND_LR:
;;;104                if(serial_out('\r')){
000106  200d              MOVS     r0,#0xd
000108  f7fffffe          BL       serial_out
00010c  b110              CBZ      r0,|L1.276|
;;;105                    s_chSendState = SEND_LN;
00010e  2007              MOVS     r0,#7
000110  4916              LDR      r1,|L1.364|
000112  7008              STRB     r0,[r1,#0]
                  |L1.276|
;;;106                }
;;;107                break; 
000114  e018              B        |L1.328|
;;;108            //---------/n
;;;109            case SEND_LN:
;;;110                if(serial_out('\n')){
000116  200a              MOVS     r0,#0xa
000118  f7fffffe          BL       serial_out
00011c  b110              CBZ      r0,|L1.292|
;;;111                    s_chSendState = SEND_WAIT;  //进入发送等待
00011e  2008              MOVS     r0,#8
000120  4912              LDR      r1,|L1.364|
000122  7008              STRB     r0,[r1,#0]
                  |L1.292|
;;;112                }
;;;113                break;                 
000124  e010              B        |L1.328|
;;;114            case SEND_WAIT:
;;;115                s_wTimeIdle++;
000126  4812              LDR      r0,|L1.368|
000128  6800              LDR      r0,[r0,#0]  ; s_wTimeIdle
00012a  1c40              ADDS     r0,r0,#1
00012c  4910              LDR      r1,|L1.368|
00012e  6008              STR      r0,[r1,#0]  ; s_wTimeIdle
;;;116                if( TIME_IDLE <= s_wTimeIdle) {               
000130  4608              MOV      r0,r1
000132  6800              LDR      r0,[r0,#0]  ; s_wTimeIdle
000134  490f              LDR      r1,|L1.372|
000136  4288              CMP      r0,r1
000138  d304              BCC      |L1.324|
;;;117                    SEND_RESET_FSM();//状态复位
00013a  bf00              NOP      
00013c  2000              MOVS     r0,#0
00013e  490b              LDR      r1,|L1.364|
000140  7008              STRB     r0,[r1,#0]
000142  bf00              NOP      
                  |L1.324|
;;;118                }
;;;119                break;
000144  e000              B        |L1.328|
                  |L1.326|
;;;120            default:
;;;121                break;
000146  bf00              NOP      
                  |L1.328|
000148  bf00              NOP                            ;77
;;;122        }
;;;123    }
00014a  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  main PROC
;;;125    int main(void)
00014c  f7fffffe          BL       system_init
;;;126    {
;;;127        system_init();
;;;128        
;;;129        while (1) {
000150  e003              B        |L1.346|
                  |L1.338|
;;;130            breath_led(); 
000152  f7fffffe          BL       breath_led
;;;131            test1();  
000156  f7fffffe          BL       test1
                  |L1.346|
00015a  e7fa              B        |L1.338|
;;;132        }
;;;133    }
;;;134    
                          ENDP

                  |L1.348|
                          DCD      s_hwCounter
                  |L1.352|
                          DCD      0x40010c14
                  |L1.356|
                          DCD      |symbol_number.10|
                  |L1.360|
                          DCD      s_nGray
                  |L1.364|
                          DCD      s_chSendState
                  |L1.368|
                          DCD      s_wTimeIdle
                  |L1.372|
                          DCD      0x00061a80

                          AREA ||.data||, DATA, ALIGN=2

                  s_hwCounter
000000  0000              DCW      0x0000
                  |symbol_number.10|
000002  0000              DCW      0x0000
                  s_nGray
000004  00ff              DCW      0x00ff
000006  0000              DCB      0x00,0x00
                  s_wTimeIdle
                          DCD      0x00000000
                  s_chSendState
00000c  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
