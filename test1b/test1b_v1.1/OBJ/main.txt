; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\OBJ\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\OBJ\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\CORE -I..\HARDWARE\KEY -I..\HARDWARE\LED -I..\HARDWARE\usart -I..\STM32F10x_FWLib\inc -I..\SYSTEM\sys -I..\USER -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F10x --omf_browse=..\OBJ\main.crf main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;119    /*--------------------delay()-----------*/
;;;120    static fsm_rt_t delay(void)   
000000  4870              LDR      r0,|L1.452|
;;;121    {
;;;122        static uint32_t s_wTimeIdle = 0; 
;;;123        static enum{
;;;124            DELAY_START = 0 ,
;;;125            DELAY_WAIT
;;;126        }s_tDelayState = DELAY_START ;
;;;127        
;;;128        switch(s_tDelayState){
000002  7800              LDRB     r0,[r0,#0]  ; s_tDelayState
000004  b110              CBZ      r0,|L1.12|
000006  2801              CMP      r0,#1
000008  d118              BNE      |L1.60|
00000a  e006              B        |L1.26|
                  |L1.12|
;;;129            case DELAY_START:
;;;130                s_wTimeIdle = 0; 
00000c  2000              MOVS     r0,#0
00000e  496e              LDR      r1,|L1.456|
000010  6008              STR      r0,[r1,#0]  ; s_wTimeIdle
;;;131                s_tDelayState = DELAY_WAIT;
000012  2001              MOVS     r0,#1
000014  496b              LDR      r1,|L1.452|
000016  7008              STRB     r0,[r1,#0]
;;;132            case DELAY_WAIT:
000018  bf00              NOP      
                  |L1.26|
;;;133                s_wTimeIdle++;            //在这里进行一些计数工作。
00001a  486b              LDR      r0,|L1.456|
00001c  6800              LDR      r0,[r0,#0]  ; s_wTimeIdle
00001e  1c40              ADDS     r0,r0,#1
000020  4969              LDR      r1,|L1.456|
000022  6008              STR      r0,[r1,#0]  ; s_wTimeIdle
;;;134                if( TIME_IDLE <= s_wTimeIdle) {  
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]  ; s_wTimeIdle
000028  4968              LDR      r1,|L1.460|
00002a  4288              CMP      r0,r1
00002c  d305              BCC      |L1.58|
;;;135                    DELAY_RESET_FSM();   //自身状态的复位。
00002e  bf00              NOP      
000030  2000              MOVS     r0,#0
000032  4964              LDR      r1,|L1.452|
000034  7008              STRB     r0,[r1,#0]
000036  bf00              NOP      
                  |L1.56|
;;;136                    return fsm_rt_cpl;   //对上层状态机发送完成的消息，延时完成。
;;;137                }
;;;138                break;
;;;139            default:
;;;140                break;
;;;141        }
;;;142        return fsm_rt_on_going;
;;;143    }
000038  4770              BX       lr
                  |L1.58|
00003a  e000              B        |L1.62|
                  |L1.60|
00003c  bf00              NOP                            ;140
                  |L1.62|
00003e  bf00              NOP                            ;138
000040  2001              MOVS     r0,#1                 ;142
000042  e7f9              B        |L1.56|
;;;144    
                          ENDP

                  print PROC
;;;60     //当状态机函数拥有返回值以后，我们就可以实现子状态机调用了----加深了两个状态机之间的联系
;;;61     static fsm_rt_t print(void)   
000044  b510              PUSH     {r4,lr}
;;;62     {
;;;63         static enum {
;;;64             PRINT_START = 0,
;;;65             PRINT_H ,
;;;66             PRINT_O ,
;;;67             PRINT_L1 ,
;;;68             PRINT_L2 ,
;;;69             PRINT_E ,
;;;70             PRINT_LR ,
;;;71             PRINT_LN 
;;;72         } s_tPrintState = PRINT_START;
;;;73         
;;;74         switch(s_tPrintState){
000046  4862              LDR      r0,|L1.464|
000048  7800              LDRB     r0,[r0,#0]  ; s_tPrintState
00004a  2808              CMP      r0,#8
00004c  d244              BCS      |L1.216|
00004e  e8dff000          TBB      [pc,r0]
000052  0408              DCB      0x04,0x08
000054  28182010          DCB      0x28,0x18,0x20,0x10
000058  3038              DCB      0x30,0x38
;;;75             case PRINT_START:
;;;76                 s_tPrintState = PRINT_H;      
00005a  2001              MOVS     r0,#1
00005c  495c              LDR      r1,|L1.464|
00005e  7008              STRB     r0,[r1,#0]
;;;77             case PRINT_H:
000060  bf00              NOP      
;;;78                 if(serial_out('h')){
000062  2068              MOVS     r0,#0x68
000064  f7fffffe          BL       serial_out
000068  b110              CBZ      r0,|L1.112|
;;;79                     s_tPrintState = PRINT_E;
00006a  2005              MOVS     r0,#5
00006c  4958              LDR      r1,|L1.464|
00006e  7008              STRB     r0,[r1,#0]
                  |L1.112|
;;;80                 }
;;;81                 break;  
000070  e033              B        |L1.218|
;;;82             case PRINT_E:
;;;83                 if(serial_out('e')){
000072  2065              MOVS     r0,#0x65
000074  f7fffffe          BL       serial_out
000078  b110              CBZ      r0,|L1.128|
;;;84                     s_tPrintState = PRINT_L1;
00007a  2003              MOVS     r0,#3
00007c  4954              LDR      r1,|L1.464|
00007e  7008              STRB     r0,[r1,#0]
                  |L1.128|
;;;85                 }
;;;86                 break;
000080  e02b              B        |L1.218|
;;;87             case PRINT_L1:
;;;88                 if(serial_out('l')){
000082  206c              MOVS     r0,#0x6c
000084  f7fffffe          BL       serial_out
000088  b110              CBZ      r0,|L1.144|
;;;89                     s_tPrintState = PRINT_L2;
00008a  2004              MOVS     r0,#4
00008c  4950              LDR      r1,|L1.464|
00008e  7008              STRB     r0,[r1,#0]
                  |L1.144|
;;;90                 }
;;;91                 break;
000090  e023              B        |L1.218|
;;;92             case PRINT_L2:
;;;93                 if(serial_out('l')){
000092  206c              MOVS     r0,#0x6c
000094  f7fffffe          BL       serial_out
000098  b110              CBZ      r0,|L1.160|
;;;94                     s_tPrintState = PRINT_O;
00009a  2002              MOVS     r0,#2
00009c  494c              LDR      r1,|L1.464|
00009e  7008              STRB     r0,[r1,#0]
                  |L1.160|
;;;95                 }
;;;96                 break;
0000a0  e01b              B        |L1.218|
;;;97             case PRINT_O:
;;;98                 if(serial_out('o')){
0000a2  206f              MOVS     r0,#0x6f
0000a4  f7fffffe          BL       serial_out
0000a8  b110              CBZ      r0,|L1.176|
;;;99                     s_tPrintState = PRINT_LR;
0000aa  2006              MOVS     r0,#6
0000ac  4948              LDR      r1,|L1.464|
0000ae  7008              STRB     r0,[r1,#0]
                  |L1.176|
;;;100                }
;;;101                break; 
0000b0  e013              B        |L1.218|
;;;102            case PRINT_LR:
;;;103                if(serial_out('\r')){
0000b2  200d              MOVS     r0,#0xd
0000b4  f7fffffe          BL       serial_out
0000b8  b110              CBZ      r0,|L1.192|
;;;104                    s_tPrintState = PRINT_LN;
0000ba  2007              MOVS     r0,#7
0000bc  4944              LDR      r1,|L1.464|
0000be  7008              STRB     r0,[r1,#0]
                  |L1.192|
;;;105                }
;;;106                break; 
0000c0  e00b              B        |L1.218|
;;;107            case PRINT_LN:
;;;108                if(serial_out('\n')){
0000c2  200a              MOVS     r0,#0xa
0000c4  f7fffffe          BL       serial_out
0000c8  b128              CBZ      r0,|L1.214|
;;;109                    PRINT_RESET_FSM();  //自身状态机的复位
0000ca  bf00              NOP      
0000cc  2000              MOVS     r0,#0
0000ce  4940              LDR      r1,|L1.464|
0000d0  7008              STRB     r0,[r1,#0]
0000d2  bf00              NOP      
                  |L1.212|
;;;110                    return fsm_rt_cpl;  //返回值---状态完成的消息，“hello”发送完成的消息
;;;111                }
;;;112                break;                 
;;;113            default:
;;;114                break;
;;;115        }
;;;116        return fsm_rt_on_going;
;;;117    }
0000d4  bd10              POP      {r4,pc}
                  |L1.214|
0000d6  e000              B        |L1.218|
                  |L1.216|
0000d8  bf00              NOP                            ;114
                  |L1.218|
0000da  bf00              NOP                            ;81
0000dc  2001              MOVS     r0,#1                 ;116
0000de  e7f9              B        |L1.212|
;;;118    
                          ENDP

                  test1b PROC
;;;30     /*--------------test1b()-------------*/
;;;31     static fsm_rt_t test1b(void)
0000e0  b510              PUSH     {r4,lr}
;;;32     {
;;;33         static enum {
;;;34             TEST1_START    = 0,
;;;35             TEST1_PRINT,
;;;36             TEST1_DELAY
;;;37         } s_tState = TEST1_START;  //枚举类型，表示状态变量s_tState有以上三种取值。
;;;38     
;;;39         switch (s_tState) {
0000e2  483c              LDR      r0,|L1.468|
0000e4  7800              LDRB     r0,[r0,#0]  ; s_tState
0000e6  b120              CBZ      r0,|L1.242|
0000e8  2801              CMP      r0,#1
0000ea  d006              BEQ      |L1.250|
0000ec  2802              CMP      r0,#2
0000ee  d115              BNE      |L1.284|
0000f0  e00a              B        |L1.264|
                  |L1.242|
;;;40             case TEST1_START:
;;;41                 s_tState = TEST1_PRINT;
0000f2  2001              MOVS     r0,#1
0000f4  4937              LDR      r1,|L1.468|
0000f6  7008              STRB     r0,[r1,#0]
;;;42             case TEST1_PRINT:
0000f8  bf00              NOP      
                  |L1.250|
;;;43                 if (fsm_rt_cpl == print()) {     //子状态机状态完成情况判断
0000fa  f7fffffe          BL       print
0000fe  b910              CBNZ     r0,|L1.262|
;;;44                     s_tState = TEST1_DELAY;      //动作转移
000100  2002              MOVS     r0,#2
000102  4934              LDR      r1,|L1.468|
000104  7008              STRB     r0,[r1,#0]
                  |L1.262|
;;;45                 }
;;;46                 break;
000106  e00a              B        |L1.286|
                  |L1.264|
;;;47             case TEST1_DELAY:
;;;48                 if (fsm_rt_cpl == delay()) {
000108  f7fffffe          BL       delay
00010c  b928              CBNZ     r0,|L1.282|
;;;49                     TEST1_RESET_FSM();
00010e  bf00              NOP      
000110  2000              MOVS     r0,#0
000112  4930              LDR      r1,|L1.468|
000114  7008              STRB     r0,[r1,#0]
000116  bf00              NOP      
                  |L1.280|
;;;50                     return fsm_rt_cpl;
;;;51                 }
;;;52                 break;
;;;53             default:
;;;54                 break;
;;;55         }
;;;56         return fsm_rt_on_going;
;;;57     } 
000118  bd10              POP      {r4,pc}
                  |L1.282|
00011a  e000              B        |L1.286|
                  |L1.284|
00011c  bf00              NOP                            ;54
                  |L1.286|
00011e  bf00              NOP                            ;46
000120  2001              MOVS     r0,#1                 ;56
000122  e7f9              B        |L1.280|
;;;58     
                          ENDP

                  set_led_gradation PROC
;;;161     */
;;;162    static void set_led_gradation(uint16_t hwLevel)
000124  492c              LDR      r1,|L1.472|
;;;163    {
;;;164        static uint16_t s_hwCounter = 0;
;;;165        
;;;166        if (hwLevel >= s_hwCounter) {
000126  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
000128  4288              CMP      r0,r1
00012a  db04              BLT      |L1.310|
;;;167            LED1_ON();
00012c  bf00              NOP      
00012e  2120              MOVS     r1,#0x20
000130  4a2a              LDR      r2,|L1.476|
000132  6011              STR      r1,[r2,#0]
000134  e005              B        |L1.322|
                  |L1.310|
;;;168        } else {
;;;169            LED1_OFF();
000136  bf00              NOP      
000138  2120              MOVS     r1,#0x20
00013a  4a28              LDR      r2,|L1.476|
00013c  1f12              SUBS     r2,r2,#4
00013e  6011              STR      r1,[r2,#0]
000140  bf00              NOP      
                  |L1.322|
;;;170        }
;;;171        
;;;172        s_hwCounter++;
000142  4925              LDR      r1,|L1.472|
000144  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
000146  1c49              ADDS     r1,r1,#1
000148  4a23              LDR      r2,|L1.472|
00014a  8011              STRH     r1,[r2,#0]
;;;173        s_hwCounter &= TOP;
00014c  4611              MOV      r1,r2
00014e  8809              LDRH     r1,[r1,#0]  ; s_hwCounter
000150  f3c10108          UBFX     r1,r1,#0,#9
000154  8011              STRH     r1,[r2,#0]
;;;174    }
000156  4770              BX       lr
;;;175    
                          ENDP

                  breath_led PROC
;;;176    static void breath_led(void)
000158  b510              PUSH     {r4,lr}
;;;177    {
;;;178        static uint16_t s_hwCounter = 0;
;;;179        static int16_t s_nGray = (TOP >> 1);
;;;180                        
;;;181        s_hwCounter++;
00015a  4821              LDR      r0,|L1.480|
00015c  8800              LDRH     r0,[r0,#0]  ; s_hwCounter
00015e  1c40              ADDS     r0,r0,#1
000160  491f              LDR      r1,|L1.480|
000162  8008              STRH     r0,[r1,#0]
;;;182        if (!(s_hwCounter & (_BV(10)-1))) {
000164  4608              MOV      r0,r1
000166  8800              LDRH     r0,[r0,#0]  ; s_hwCounter
000168  0580              LSLS     r0,r0,#22
00016a  0d80              LSRS     r0,r0,#22
00016c  d10f              BNE      |L1.398|
;;;183            s_nGray++; 
00016e  481d              LDR      r0,|L1.484|
000170  8800              LDRH     r0,[r0,#0]  ; s_nGray
000172  1c40              ADDS     r0,r0,#1
000174  b200              SXTH     r0,r0
000176  491b              LDR      r1,|L1.484|
000178  8008              STRH     r0,[r1,#0]
;;;184            if (s_nGray == TOP) {
00017a  4608              MOV      r0,r1
00017c  f9b00000          LDRSH    r0,[r0,#0]  ; s_nGray
000180  f5a07180          SUB      r1,r0,#0x100
000184  39ff              SUBS     r1,r1,#0xff
000186  d102              BNE      |L1.398|
;;;185                s_nGray = 0;
000188  2000              MOVS     r0,#0
00018a  4916              LDR      r1,|L1.484|
00018c  8008              STRH     r0,[r1,#0]
                  |L1.398|
;;;186            }
;;;187        }
;;;188        
;;;189        set_led_gradation(ABS(s_nGray - (TOP >> 1)));
00018e  4915              LDR      r1,|L1.484|
000190  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
000194  39ff              SUBS     r1,r1,#0xff
000196  d505              BPL      |L1.420|
000198  4912              LDR      r1,|L1.484|
00019a  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
00019e  f1c101ff          RSB      r1,r1,#0xff
0001a2  e003              B        |L1.428|
                  |L1.420|
0001a4  490f              LDR      r1,|L1.484|
0001a6  f9b11000          LDRSH    r1,[r1,#0]  ; s_nGray
0001aa  39ff              SUBS     r1,r1,#0xff
                  |L1.428|
0001ac  b288              UXTH     r0,r1
0001ae  f7fffffe          BL       set_led_gradation
;;;190    }
0001b2  bd10              POP      {r4,pc}
;;;191    /*-----------------------breath_led()--end----------*/
                          ENDP

                  main PROC
;;;147    /*-main-*/
;;;148    int main(void)
0001b4  f7fffffe          BL       system_init
;;;149    {
;;;150        system_init();
;;;151        
;;;152        while (1) {
0001b8  e003              B        |L1.450|
                  |L1.442|
;;;153            breath_led(); 
0001ba  f7fffffe          BL       breath_led
;;;154            test1b();  
0001be  f7fffffe          BL       test1b
                  |L1.450|
0001c2  e7fa              B        |L1.442|
;;;155        }
;;;156    }
;;;157    
                          ENDP

                  |L1.452|
                          DCD      s_tDelayState
                  |L1.456|
                          DCD      s_wTimeIdle
                  |L1.460|
                          DCD      0x00061a80
                  |L1.464|
                          DCD      s_tPrintState
                  |L1.468|
                          DCD      s_tState
                  |L1.472|
                          DCD      s_hwCounter
                  |L1.476|
                          DCD      0x40010c14
                  |L1.480|
                          DCD      |symbol_number.14|
                  |L1.484|
                          DCD      s_nGray

                          AREA ||.data||, DATA, ALIGN=2

                  s_tState
000000  00                DCB      0x00
                  s_tPrintState
000001  000000            DCB      0x00,0x00,0x00
                  s_wTimeIdle
                          DCD      0x00000000
                  s_tDelayState
000008  0000              DCB      0x00,0x00
                  s_hwCounter
00000a  0000              DCW      0x0000
                  |symbol_number.14|
00000c  0000              DCW      0x0000
                  s_nGray
00000e  00ff              DCW      0x00ff

                  __ARM_use_no_argv EQU 0
